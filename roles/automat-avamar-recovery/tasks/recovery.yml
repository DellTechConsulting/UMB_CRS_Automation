--- 
#### Cyber Recovery Login Setup
      - name: login
        uri:
          url: "{{crrest_base_url}}/login"
          validate_certs: "{{crrest_verify_certs}}"
          method: POST
          body_format: json
          body:
            username: "{{crrest_username}}"
            password: "{{crrest_password}}"
        register: crrest_login_info
        tags:
          - check
#        no_log: "crrest_secure_logging"

      - name: Set Login Token
        set_fact:
          crrest_token: "{{crrest_login_info.json.accessToken}}"
          crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
        tags:
          - check

      ################# Checking for Existing Sandbox
      - name: Check if Sandbox Exists
        uri:
          url: "{{ crrest_base_url }}/policies/{{id1}}/sandboxes"
          validate_certs: "{{ crrest_verify_certs }}"
          method: GET
          headers:
                X-CR-AUTH-TOKEN: "{{ crrest_token }}"
                Accept: application/json
        register: crrest_sandbox_info
        tags:
          - check
      
      - name: Fetching the sandbox id  from the sandbox details 
        set_fact:
          sandbox_id: "{{sandbox_id + [item.id]}}"
        with_items: "{{ crrest_sandbox_info | json_query('json.items[*]')}}"
        tags:
          - check

      - debug: 
          msg: "{{sandbox_id}}"
        tags:
          - check
          - delete
          - fail
          - recover

      - name: Failing the playbook scinc sandbox not exist
        when: (crrest_sandbox_info.json['items'] | length) != 0
        fail:
          msg: "sandbox exist for this policy we can not create sandbox and recover"
        tags:
          - fail

      - name: printing sandbox exist
        debug: 
          msg: "There were no sandbox found"
        when: (crrest_sandbox_info.json['items'] | length) == 0
        tags:
          - check

      # - name: Delete Sandbox
      #   uri:
      #    url: "{{ crrest_base_url }}/policies/{{ id1 }}/sandboxes/{{ sandbox_id1 }}"
      #    validate_certs: "{{ crrest_verify_certs }}"
      #    method: DELETE
      #    headers:
      #       X-CR-AUTH-TOKEN: "{{ crrest_token }}"
      #       Accept: application/json
      #   register: crrest_sandbox_delete
     
      #   tags: 
      #     - delete

      # # Pause for 1 minutes to get the job status.
      # - pause:
      #     minutes: 1
      #   tags:
      #     - delete
      # - name: login
      #   uri:
      #     url: "{{crrest_base_url}}/login"
      #     validate_certs: "{{crrest_verify_certs}}"
      #     method: POST
      #     body_format: json
      #     body:
      #       username: "{{crrest_username}}"
      #       password: "{{crrest_password}}"
      #   register: crrest_login_info
      #   tags:
      #     - check
      # - name: Set Login Token
      #   set_fact:
      #     crrest_token: "{{crrest_login_info.json.accessToken}}"
      #     crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
      #   tags:
      #     - check

      # - name: Check Sandbox status 
      #   uri:
      #     url: "{{ crrest_base_url }}/policies/{{id1}}/sandboxes"
      #     validate_certs: "{{ crrest_verify_certs }}"
      #     method: GET
      #     headers:
      #           X-CR-AUTH-TOKEN: "{{ crrest_token }}"
      #           Accept: application/json
      #   register: crrest_sandbox_info
      
      #   tags:
      #     - delete
      # - name: printing sandbox exist
      #   debug: 
      #     msg: "There were no sandbox found, deleteted successfully"
      #   when: (crrest_sandbox_info.json['items'] | length) == 0
      #   tags:
      #     - delete
      
      
      - name: Get all CR application details
        uri:
          validate_certs: "{{crrest_verify_certs}}"
          force_basic_auth: yes
          url: "{{crrest_base_url}}/apps"
          method: GET
          headers:
            Content-Type: application/json
            Accept: application/json
            X-CR-AUTH-TOKEN: "{{ crrest_token}}"
          body_format: json
          status_code: 200
          return_content: yes
        register: app_details
        tags:
          - recover

    ## Obtaining the application names from the app_details
      - name: Fetching the application name from the app details 
        set_fact:
          app_name_list: "{{app_name_list + [item.nickname]}}"
        with_items: "{{ app_details | json_query('json.items[*]')}}"
        tags:
          - recover


    ## verifying whether or not the passing policy name 

      - name: printing app name exist
        debug: 
          msg: "allpication {{ cr_restore_AVE_app_name}} exist"
        tags:
          - recover

      - name: Failing the playbook scinc app name  does not exist
        fail:
          msg: Failing the playbook scince {{item}} does not exist.
        when: item not in app_name_list
        with_items:
          - "{{cr_restore_AVE_app_name}}"
        tags:
          - recover
             
      - name: Map the CS app name with app id 
        set_fact: 
          app_id: "{{ item.id }}"
        when: 
          - item.nickname in cr_restore_AVE_app_name
        with_items: 
          - "{{ app_details | json_query('json.items[*]')}}"
        tags:
          - recover
        
      - set_fact:
          app_id: "{{app_id}}"
        tags:
          - recover

      - debug:
          msg: "{{ cs_app_id }}"
        tags:
          - recover

      - name: recovery for the copy
        uri:
          validate_certs: no
          force_basic_auth: yes
          url: "{{ crrest_base_url }}/actions/recoverapp"
          method: POST
          headers:
                Content-Type: application/json
                Accept: application/json
                X-CR-AUTH-TOKEN: "{{ crrest_token}}"
          body_format: json
          status_code: 200
          body:
            {
              "policyID": "{{id1}}",
              "copyID": "{{cr_restore_copy_source_id1}}",
              "appID": "{{ app_id }}"
            }
        register: results_Createpolicy
        tags:
          - recover

      - pause:
          minutes: 5
        tags:
          - recover
      - name: login
        uri:
          url: "{{crrest_base_url}}/login"
          validate_certs: "{{crrest_verify_certs}}"
          method: POST
          body_format: json
          body:
            username: "{{crrest_username}}"
            password: "{{crrest_password}}"
        register: crrest_login_info
        tags:
          - recover
      - name: Set Login Token
        set_fact:
          crrest_token: "{{crrest_login_info.json.accessToken}}"
          crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
        tags:
          - recover

      - name: Check Sandbox status 
        uri:
          url: "{{ crrest_base_url }}/policies/{{id1}}/sandboxes"
          validate_certs: "{{ crrest_verify_certs }}"
          method: GET
          headers:
                X-CR-AUTH-TOKEN: "{{ crrest_token }}"
                Accept: application/json
        register: crrest_sandbox_info
        tags:
          - recover
      - name: Fetching the policy names from the policy details 
        set_fact:
           cr_id1: "{{ cr_id1 + [item.copyid]}}"
        with_items: "{{ crrest_sandbox_info | json_query('json.items[*]')}}"
        tags:
          - recover
                  
      - name: printing sandbox exist
        debug: 
          msg: "The sanbox created and recovered the copy  {{cr_id1}}successfully"
        when: (crrest_sandbox_info.json['items'] | length) != 0
        tags:
          - recover

      # - name: analysis report
      #   uri:
      #     validate_certs: no
      #     force_basic_auth: yes
      #     url: "{{ crrest_base_url }}/copies/63956f0394422f0001606d8b/analysisreports"
      #     method: POST
      #     headers:
      #           Content-Type: application/json
      #           Accept: application/json
      #           X-CR-AUTH-TOKEN: "{{ crrest_token}}"
      #     body_format: json
      #     status_code: 200
      #     body:
      #       {
      #         "List_of_email_addresses": [
      #           "cyberrecovery@dell.com"
      #         ]
      #       }
      #   register: results_Createpolicy
      #   changed_when: true
  