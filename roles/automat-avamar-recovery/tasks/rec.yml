--- 
#### Cyber Recovery Login Setup
      - name: login
        uri:
          url: "{{crrest_base_url}}/login"
          validate_certs: "{{crrest_verify_certs}}"
          method: POST
          body_format: json
          body:
            username: "{{crrest_username}}"
            password: "{{crrest_password}}"
        register: crrest_login_info
        # tags:
        #   - check
#        no_log: "crrest_secure_logging"

      - name: Set Login Token
        set_fact:
          crrest_token: "{{crrest_login_info.json.accessToken}}"
          crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
        # tags:
        #   - check

      # - name: Gather Policy information
      #   uri:
      #     url: "{{crrest_base_url}}/policies"
      #     return_content: yes
      #     validate_certs: "{{crrest_verify_certs}}"
      #     method: GET
      #     headers:
      #       X-CR-AUTH-TOKEN: "{{crrest_token}}"
      #   register: crrest_policies_info
      #   changed_when: false

      
      # - name: Fail to return any policies
      #   when: (crrest_policies_info.json['items'] | length) == 0
      #   fail:
      #     msg: "There were no policies found"

      # - name: setting facts based on the policy "{{cr_restore_policy_name}}"
      #   when: "'{{cr_restore_policy_name}}'in cr_restore_policy_name"
      #   register: found
      #   set_fact:
      #     # mtree: "{{crrest_policies_info.json['items'][0]['assetDetails'][0].mgmtddReplCtxName}}"
      #     cr_policy_id: "{{crrest_policies_info.json['items'][0].id}}"
      #     # cr_policy_info: "{{crrest_policies_info.json['items'][0]}}"

  
        # when: "'{{cr_restore_policy_name}}'in cr_restore_policy_name"
      # - name: setting facts based on the policy "{{cr_restore_policy_name}}"
      #   when: "'{{cr_restore_policy_name}}'in cr_restore_policy_name"
      #   register: found
      #   set_fact:
      #     cr_policy_id: "{{cr_policy_id + [item.id]}}"
      #   with_items: "{{ crrest_policies_info | json_query('json.items[*]')}}"

      # - debug:
      #     msg: "{{cr_policy_id}}"

      # - name: fail if not found
      #   when: found is skipped
      #   fail:
      #     msg: couldn't find Policy Name

      ################# Checking for Existing Sandbox


      - name: Check if Sandbox Exists
        uri:
          url: "{{ crrest_base_url }}/policies/{{id1}}/sandboxes"
          validate_certs: "{{ crrest_verify_certs }}"
          method: GET
          headers:
                X-CR-AUTH-TOKEN: "{{ crrest_token }}"
                Accept: application/json
        register: crrest_sandbox_info
      #   tags:
      #     - check
      
      - name: Fetching the sandbox id  from the sandbox details 
        set_fact:
          sandbox_id: "{{sandbox_id + [item.id]}}"
        with_items: "{{ crrest_sandbox_info | json_query('json.items[*]')}}"
      #   tags:
      #     - check

      - debug: 
          msg: "{{sandbox_id}}"
      #   tags:
      #     - check
      #     - delete
      #     - fail


      - name: Failing the playbook scinc sandbox not exist
        when: (crrest_sandbox_info.json['items'] | length) != 0
        fail:
          msg: "sandbox exist for this policy we can not create sandbox and recover"
      #   tags:
      #     - fail


      - name: printing sandbox exist
        debug: 
          msg: "There were no sandbox found"
        when: (crrest_sandbox_info.json['items'] | length) == 0
      #   tags:
      #     - check

      # - name: Delete Sandbox
      #   uri:
      #    url: "{{ crrest_base_url }}/policies/{{ cr_policy_id }}/sandboxes/{{ item }}"
      #    validate_certs: "{{ crrest_verify_certs }}"
      #    method: DELETE
      #    headers:
      #       X-CR-AUTH-TOKEN: "{{ crrest_token }}"
      #       Accept: application/json
      #   register: crrest_sandbox_delete
      #   with_items: 
      #     - "{{sandbox_id}}"
      #   tags: 
      #     - delete

      # # Pause for 1 minutes to get the job status.
      # - pause:
      #     minutes: 1
      #   tags:
      #     - delete
      # - name: login
      #   uri:
      #     url: "{{crrest_base_url}}/login"
      #     validate_certs: "{{crrest_verify_certs}}"
      #     method: POST
      #     body_format: json
      #     body:
      #       username: "{{crrest_username}}"
      #       password: "{{crrest_password}}"
      #   register: crrest_login_info
      #   tags:
      #     - check
      # - name: Set Login Token
      #   set_fact:
      #     crrest_token: "{{crrest_login_info.json.accessToken}}"
      #     crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
      #   tags:
      #     - check

      # - name: Check Sandbox status 
      #   uri:
      #     url: "{{ crrest_base_url }}/policies/639193fd94422f0001606cd8/sandboxes"
      #     validate_certs: "{{ crrest_verify_certs }}"
      #     method: GET
      #     headers:
      #           X-CR-AUTH-TOKEN: "{{ crrest_token }}"
      #           Accept: application/json
      #   register: crrest_sandbox_info
      #   tags:
      #     - delete
      # - name: printing sandbox exist
      #   debug: 
      #     msg: "There were no sandbox found, deleteted successfully"
      #   when: (crrest_sandbox_info.json['items'] | length) == 0
      #   tags:
      #     - delete

      - name: recovery for the copy
        uri:
          validate_certs: no
          force_basic_auth: yes
          url: "{{ crrest_base_url }}/actions/recoverapp"
          method: POST
          headers:
                Content-Type: application/json
                Accept: application/json
                X-CR-AUTH-TOKEN: "{{ crrest_token}}"
          body_format: json
          status_code: 200
          body:
            {
              "policyID": "{{id1}}",
              "copyID": "{{cr_restore_copy_source_id1}}",
              "appID": "61beeade9a6dd2000150e772"
            }
        register: results_Createpolicy

      # - include_tasks: rec.yml
        
      #   tags:
      #     - recover

      - pause:
          minutes: 5
      #   tags:
      #     - recover
      - name: login
        uri:
          url: "{{crrest_base_url}}/login"
          validate_certs: "{{crrest_verify_certs}}"
          method: POST
          body_format: json
          body:
            username: "{{crrest_username}}"
            password: "{{crrest_password}}"
        register: crrest_login_info
        tags:
          - recover
      - name: Set Login Token
        set_fact:
          crrest_token: "{{crrest_login_info.json.accessToken}}"
          crrest_refresh_token: "{{crrest_login_info.json.refreshToken}}"
      #   tags:
      #     - recover

      - name: Check Sandbox status 
        uri:
          url: "{{ crrest_base_url }}/policies/{{id1}}/sandboxes"
          validate_certs: "{{ crrest_verify_certs }}"
          method: GET
          headers:
                X-CR-AUTH-TOKEN: "{{ crrest_token }}"
                Accept: application/json
        register: crrest_sandbox_info
      #   tags:
      #     - recover
      - name: printing sandbox exist
        debug: 
          msg: "The sanbox created and recovered the copy successfully"
        when: (crrest_sandbox_info.json['items'] | length) != 0
      #   tags:
      #     - recover
      # - include_tasks: rec.yml

      # - name: analysis report
      #   uri:
      #     validate_certs: no
      #     force_basic_auth: yes
      #     url: "{{ crrest_base_url }}/copies/63956f0394422f0001606d8b/analysisreports"
      #     method: POST
      #     headers:
      #           Content-Type: application/json
      #           Accept: application/json
      #           X-CR-AUTH-TOKEN: "{{ crrest_token}}"
      #     body_format: json
      #     status_code: 200
      #     body:
      #       {
      #         "List_of_email_addresses": [
      #           "cyberrecovery@dell.com"
      #         ]
      #       }
      #   register: results_Createpolicy
      #   changed_when: true
  